input {
  pipeline { 
    address => "enrichment_channel" 
  }
}

filter {
  # 거래 이벤트에 대해서만 강화 처리
  if "transaction_event" in [tags] or "legacy_transaction" in [tags] {
    
    # 1단계: FDS DB에서 블랙리스트 조회
    jdbc_streaming {
      jdbc_driver_library => "/usr/share/logstash/config/mariadb-java-client-3.5.5.jar"
      jdbc_driver_class => "org.mariadb.jdbc.Driver"
      jdbc_connection_string => "jdbc:mariadb://mariadb_fds:3306/fds_system?useSSL=false"
      jdbc_user => "fds_user"
      jdbc_password => "fds_password"
      statement => "SELECT reason, risk_level FROM blacklist WHERE type = 'USER_ID' AND value = :user_param"
      parameters => { "user_param" => "[user_id]" }
      target => "blacklist_user"
      cache_size => 1000
      cache_expiration => 300
      tag_on_failure => ["_blacklist_lookup_failed"]
    }
    
    # 카드 번호 블랙리스트 조회 (있는 경우)
    if [card_number] {
      jdbc_streaming {
        jdbc_driver_library => "/usr/share/logstash/config/mariadb-java-client-3.5.5.jar"
        jdbc_driver_class => "org.mariadb.jdbc.Driver"
        jdbc_connection_string => "jdbc:mariadb://mariadb_fds:3306/fds_system?useSSL=false"
        jdbc_user => "fds_user"
        jdbc_password => "fds_password"
        statement => "SELECT reason, risk_level FROM blacklist WHERE type = 'CARD_NUMBER' AND value = :card_param"
        parameters => { "card_param" => "[card_number]" }
        target => "blacklist_card"
        cache_size => 1000
        cache_expiration => 300
        tag_on_failure => ["_blacklist_card_lookup_failed"]
      }
    }
    
    # 가맹점 위험도 조회
    if [merchant_id] {
      jdbc_streaming {
        jdbc_driver_library => "/usr/share/logstash/config/mariadb-java-client-3.5.5.jar"
        jdbc_driver_class => "org.mariadb.jdbc.Driver"
        jdbc_connection_string => "jdbc:mariadb://mariadb_fds:3306/fds_system?useSSL=false"
        jdbc_user => "fds_user"
        jdbc_password => "fds_password"
        statement => "SELECT merchant_name, category, is_high_risk FROM merchants WHERE merchant_id = :merch_param"
        parameters => { "merch_param" => "[merchant_id]" }
        target => "merchant_info"
        cache_size => 500
        cache_expiration => 600
        tag_on_failure => ["_merchant_lookup_failed"]
      }
    }
    
    # 2단계: 계정계 DB에서 계좌 상태 조회
    if [account_id] or [user_id] {
      jdbc_streaming {
        jdbc_driver_library => "/usr/share/logstash/config/mariadb-java-client-3.5.5.jar"
        jdbc_driver_class => "org.mariadb.jdbc.Driver"
        jdbc_connection_string => "jdbc:mariadb://mariadb_account_system:3306/account_system?useSSL=false"
        jdbc_user => "fds_user"
        jdbc_password => "fds_password"
        statement => "SELECT a.status, a.balance, a.daily_limit, a.daily_used, 
                     DATEDIFF(NOW(), a.last_transaction_date) as days_inactive,
                     c.customer_grade 
                     FROM accounts a 
                     LEFT JOIN customers c ON a.user_id = c.user_id 
                     WHERE a.account_id = :acc_param OR a.user_id = :user_param 
                     LIMIT 1"
        parameters => { 
          "acc_param" => "[account_id]"
          "user_param" => "[user_id]"
        }
        target => "account_info"
        cache_size => 2000
        cache_expiration => 120
        tag_on_failure => ["_account_lookup_failed"]
      }
    }
    
    # 3단계: Redis에서 실시간 카운터 조회 및 업데이트
    ruby {
            init => '
        require "redis"
        @redis = nil
      '
      code => '
        begin
          @redis ||= Redis.new(host: "redis", port: 6379, timeout: 1)
          
          user = event.get("user_id")
          ip = event.get("ip_address")
          
          if user
            # 최근 1분간 거래 횟수
            tx_count_key = "txn_count:1min:#{user}"
            current_count = @redis.get(tx_count_key).to_i
            event.set("recent_transactions_1min", current_count)
            
            # 카운터 증가 및 TTL 설정
            @redis.incr(tx_count_key)
            @redis.expire(tx_count_key, 60)
            
            # 최근 5분간 거래 총액
            amount = event.get("transaction_amount").to_f
            if amount > 0
              amount_key = "txn_amount:5min:#{user}"
              total_amount = @redis.get(amount_key).to_f
              event.set("recent_amount_5min", total_amount)
              
              @redis.incrbyfloat(amount_key, amount)
              @redis.expire(amount_key, 300)
            end
          end
          
          if ip
            # IP별 시도 횟수
            ip_key = "ip_attempts:#{ip}"
            attempts = @redis.get(ip_key).to_i
            event.set("ip_attempt_count", attempts)
            
            @redis.incr(ip_key)
            @redis.expire(ip_key, 600)
          end
          
        rescue => e
          event.tag("_redis_error")
          event.set("redis_error", e.message)
        end
      '
    }
    
    # 4단계: GeoIP 강화
    #    if [ip_address] {
#      geoip {
#        source => "ip_address"
#        target => "geoip"
#        database => "/usr/share/logstash/GeoLite2-City.mmdb"
#        fields => ["country_name", "city_name", "location"]
#        tag_on_failure => ["_geoip_failed"]
#      }
#    }
    
    # 5단계: 사기 위험도 평가
    ruby {
      code => '
        fraud_indicators = []
        risk_score = 0
        
        # 블랙리스트 체크
        if event.get("[blacklist_user][0][risk_level]")
          risk_score += event.get("[blacklist_user][0][risk_level]").to_i
          fraud_indicators << "BLACKLISTED_USER"
        end
        
        if event.get("[blacklist_card][0][risk_level]")
          risk_score += event.get("[blacklist_card][0][risk_level]").to_i
          fraud_indicators << "BLACKLISTED_CARD"
        end
        
        # 고위험 가맹점 체크
        if event.get("[merchant_info][0][is_high_risk]") == 1
          risk_score += 5
          fraud_indicators << "HIGH_RISK_MERCHANT"
        end
        
        # 휴면계좌 체크
        if event.get("[account_info][0][status]") == "DORMANT"
          risk_score += 8
          fraud_indicators << "DORMANT_ACCOUNT"
          
          days_inactive = event.get("[account_info][0][days_inactive]").to_i
          if days_inactive > 365
            risk_score += 5
            fraud_indicators << "LONG_DORMANT"
          end
        end
        
        # 한도 초과 체크
        if event.get("[account_info][0][daily_limit]") && event.get("transaction_amount")
          daily_limit = event.get("[account_info][0][daily_limit]").to_f
          daily_used = event.get("[account_info][0][daily_used]").to_f
          amount = event.get("transaction_amount").to_f
          
          if (daily_used + amount) > daily_limit
            risk_score += 7
            fraud_indicators << "LIMIT_EXCEEDED"
          end
        end
        
        # 고빈도 거래 체크
        recent_count = event.get("recent_transactions_1min").to_i
        if recent_count > 5
          risk_score += 6
          fraud_indicators << "HIGH_FREQUENCY"
        end
        
        # 고액 단기 거래 체크
        recent_amount = event.get("recent_amount_5min").to_f
        if recent_amount > 5000000
          risk_score += 5
          fraud_indicators << "HIGH_AMOUNT_SHORT_TERM"
        end
        
        # IP 다중 시도 체크
        ip_attempts = event.get("ip_attempt_count").to_i
        if ip_attempts > 10
          risk_score += 4
          fraud_indicators << "SUSPICIOUS_IP_ACTIVITY"
        end
        
        # 결과 설정
        event.set("risk_score", risk_score)
        event.set("fraud_indicators", fraud_indicators)
        event.set("is_suspicious", risk_score >= 10)
        
        # 위험 등급 설정
        if risk_score >= 20
          event.set("risk_level", "CRITICAL")
        elsif risk_score >= 15
          event.set("risk_level", "HIGH")
        elsif risk_score >= 10
          event.set("risk_level", "MEDIUM")
        elsif risk_score >= 5
          event.set("risk_level", "LOW")
        else
          event.set("risk_level", "NORMAL")
        end
      '
    }
    
    # 필드 정리
    mutate {
      remove_field => ["@metadata"]
      add_field => {
        "processed_at" => "%{@timestamp}"
      }
    }
  }
}

output {
  # 거래 데이터는 transactions 인덱스로
  if "transaction_event" in [tags] or "legacy_transaction" in [tags] {
    elasticsearch {
      hosts => ["es01:9200", "es02:9200", "es03:9200"]
      index => "transactions-%{+YYYY.MM.dd}"
      document_id => "%{transaction_id}"
    }
    
    # 고위험 거래는 별도 알림 인덱스로도 저장
    if [risk_level] == "CRITICAL" or [risk_level] == "HIGH" {
      elasticsearch {
        hosts => ["es01:9200", "es02:9200", "es03:9200"]
        index => "alerts-%{+YYYY.MM.dd}"
      }
    }
  }
  
  # 디버깅용 stdout (개발 환경에서만)
  # stdout { 
  #   codec => rubydebug 
  # }
}